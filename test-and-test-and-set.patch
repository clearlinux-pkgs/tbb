diff -purN oneTBB-2019_U9.org/include/tbb/tbb_machine.h oneTBB-2019_U9/include/tbb/tbb_machine.h
--- oneTBB-2019_U9.org/include/tbb/tbb_machine.h	2019-10-09 14:58:36.000000000 +0000
+++ oneTBB-2019_U9/include/tbb/tbb_machine.h	2022-04-12 15:08:19.697426188 +0000
@@ -907,7 +907,14 @@ inline void __TBB_AtomicAND( volatile vo
 #ifndef __TBB_Flag
 typedef unsigned char __TBB_Flag;
 #endif
-typedef __TBB_atomic __TBB_Flag __TBB_atomic_flag;
+typedef __TBB_atomic __TBB_Flag __TBB_atomic_flag;
+
+#ifndef __TBB_Is_locked
+inline bool __TBB_Is_Locked(__TBB_atomic_flag flag)
+{
+	return (flag == 1);
+}
+#endif
 
 #ifndef __TBB_TryLockByte
 inline bool __TBB_TryLockByte( __TBB_atomic_flag &flag ) {
@@ -918,7 +925,11 @@ inline bool __TBB_TryLockByte( __TBB_ato
 #ifndef __TBB_LockByte
 inline __TBB_Flag __TBB_LockByte( __TBB_atomic_flag& flag ) {
     tbb::internal::atomic_backoff backoff;
-    while( !__TBB_TryLockByte(flag) ) backoff.pause();
+    do {
+	while (__TBB_Is_Locked(flag))
+		backoff.pause();
+    }
+    while( !__TBB_TryLockByte(flag) ) ;
     return 0;
 }
 #endif
diff -purN oneTBB-2019_U9.org/src/tbb/spin_mutex.cpp oneTBB-2019_U9/src/tbb/spin_mutex.cpp
--- oneTBB-2019_U9.org/src/tbb/spin_mutex.cpp	2019-10-09 14:58:36.000000000 +0000
+++ oneTBB-2019_U9/src/tbb/spin_mutex.cpp	2022-04-12 15:11:19.308423687 +0000
@@ -39,6 +39,8 @@ void spin_mutex::scoped_lock::internal_r
 
 bool spin_mutex::scoped_lock::internal_try_acquire( spin_mutex& m ) {
     __TBB_ASSERT( !my_mutex, "already holding a lock on a spin_mutex" );
+    if (__TBB_Is_Locked(m.flag))
+	return false;
     bool result = bool( __TBB_TryLockByte(m.flag) );
     if( result ) {
         my_mutex = &m;
